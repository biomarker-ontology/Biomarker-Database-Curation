# the marker db data set did not have headers so had to add in later
markerdb = pd.read_csv('markerdb_targets.csv', header=None, names=['ID', 'gene', "change", "disease", 'something'])

lst = ['Assessed biomarker entity ID', 'Main x-ref',
       'Assessed biomarker entity', 'Biomarker', 'BEST biomarker type',
       'Specimen type', 'LOINC code', 'Disease name', 'Assessed entity type',
       'Evidence', 'Notes']
biomarkerdb = pd.DataFrame(columns = lst)


biomarkerdb['Biomarker'] = markerdb['gene'] + ' (' + markerdb['change'] + ')'
biomarkerdb['Assessed biomarker entity'] = markerdb['gene']
biomarkerdb['Evidence'] = 'markerDB'
biomarkerdb['Notes'] = 'GRCh38' 
biomarkerdb['Disease name'] = markerdb['disease'].apply(str.lower)
biomarkerdb['Assessed entity type'] = 'gene or protein'

biomarkerdb['markerdb_id'] = markerdb['ID']

uniprot_acc = pd.read_table('uniprot_names.tsv')

name_to_uniprot = dict(zip(uniprot_acc["Gene Names"].str.lower().str.strip(), uniprot_acc["Entry"]))

# Iterate over each row in biomarkerdb
for index, row in biomarkerdb.iterrows():
    id = row["Assessed biomarker entity"]
    if id.lower().strip() in gene_to_uniprot:
        protein_id = gene_to_uniprot[id.lower().strip()]
        biomarkerdb.at[index, "Main x-ref"] = protein_id
        
biomarkerdb['Names'] = ''

for index, row in biomarkerdb.iterrows():
    id = row["Assessed biomarker entity"]
    matching_rows = uniprot_acc.loc[uniprot_acc["Gene Names"].str.lower().str.strip() == id.lower().strip()]
    if not matching_rows.empty:
        protein_id = matching_rows.iloc[0]["Protein names"]
        biomarkerdb.at[index, "Names"] = protein_id

loinc_codes = pd.read_csv("Loinc.csv")
loinc_codes['first'] = loinc_codes['COMPONENT'].str.split(' ').str[0]

biomarkerdb['LOINC code'] = ''

for index, row in biomarkerdb.iterrows():
    # get the ID for that row
    id = row["Assessed biomarker entity"]
    # check if that ID exists in the ID column of table 2
    matching_row = loinc_codes.loc[loinc_codes["first"] == id]
    # if it does, retrieve the corresponding protein ID from table 2
    if not matching_row.empty:
        loinc_id = matching_row.iloc[0]["LOINC_NUM"]
        # insert the protein ID into the appropriate column of table 1
        biomarkerdb.at[index, "LOINC code"] = loinc_id
        
loinc_dict = loinc_codes.set_index("LOINC_NUM")["SYSTEM"].to_dict()

# Iterate through the rows of your biomarkerdb table
for i, row in biomarkerdb.iterrows():
    # Get the value of the "Uberon ID" column for this row
    LOINC = row["LOINC code"]
    if pd.notnull(LOINC) and LOINC in loinc_dict:
        # Use the dictionary to look up the corresponding label
        SYSTEM = loinc_dict[LOINC]
        # Assign the label to the "Label" column in this row
        biomarkerdb.at[i, "SYSTEM"] = SYSTEM    
        
        
uberon_map = pd.read_csv("uberon_system.csv", dtype={"uberon_value": "str"})
biomarkerdb['Specimen type'] = ''

for index, row in biomarkerdb.iterrows():
    # get the ID for that row
    id = row["SYSTEM"]
    # check if that ID exists in the ID column of table 2
    matching_row = uberon_map.loc[uberon_map["system"] == id]
    # if it does, retrieve the corresponding protein ID from table 2
    if not matching_row.empty:
        protein_id = matching_row.iloc[0]["uberon_value"]
        name_id = matching_row.iloc[0]["name"]
        # insert the protein ID into the appropriate column of table 1
        biomarkerdb.at[index, "Specimen type"] = name_id + " (UN:" + protein_id + ")"
        
doid_table = pd.read_csv('doid_table.csv')
# Create a dictionary of DOIDs with disease name as key and synonyms as values
doid_dict = doid_table.set_index("Disease Name")[["DOID", "Exact Synonyms"]].to_dict("index")

# Add a new column to your biomarkerdb table called "DOID"
biomarkerdb["DOID"] = None

# Iterate through the rows of your biomarkerdb table
for i, row in biomarkerdb.iterrows():
    disease_name = row["Disease name"].lower()
    if disease_name in doid_dict:
        biomarkerdb.at[i, "DOID"] = doid_dict[disease_name]["DOID"]
    else:
        for name, value in doid_dict.items():
            if disease_name in value["Exact Synonyms"]:
                biomarkerdb.at[i, "DOID"] = value["DOID"]
                break
def format_doid(row):
    if pd.notnull(row["Name"]):
        return "{} ({})".format(row["Name"], row["Assessed biomarker entity"])
    else:
        return row["Assessed biomarker entity"]

# apply function to "disease name" column
biomarkerdb["Assessed biomarker entity"] = biomarkerdb.apply(format_doid, axis=1)

def format_doid(row):
    if pd.notnull(row["DOID"]):
        return "{} ({})".format(row["Disease name"], "DOID:" + row["DOID"])
    else:
        return row["Disease name"]

# apply function to "disease name" column
biomarkerdb["Disease name"] = biomarkerdb.apply(format_doid, axis=1)

biomarkerdb.to_csv('markerdb_biomarkers.csv')
biomarker_r = pd.read_csv('markerdb_biomarkers.csv')

biomarker_r.columns = ['X', 'biomarker_ID', 'main_Xref', 'assessed_biomarker_entity', 'biomarker_status', 
                       'best_biomarker_type', 'specimen_type', 'loinc_code', 'condition_name', 'assessed_entity_type',
                       'evidence_source', 'notes', 'markerdb_id', 'Name', 'system', 'DOID']
biomarker_r['rsID'] = 'rs' + biomarker_r["biomarker_status"].str.extract(r"\(rs(\d+)\)")
biomarker_r['variant'] = biomarker_r['biomarker_status'].str.extract(r'\((.*)\)')
biomarker_r['rsID2'] = 'rs' + biomarker_r["biomarker_status"].str.extract(r"\(rs(\d+)\)")

def format_doid(row):
    if pd.notnull(row["rsID2"]):
        return row['notes']
    else:
        return "({})|GRCh38 ".format(row['variant'])

# apply function to "disease name" column
biomarker_r["notes"] = biomarker_r.apply(format_doid, axis=1)

def format_doid(row):
    if pd.notnull(row["main_Xref"]):
        return "UPKB:{} {}".format(row['main_Xref'], row['notes'])
    else:
        return row['notes']

# apply function to "disease name" column
biomarker_r["notes"] = biomarker_r.apply(format_doid, axis=1)

biomarker_r['main_Xref'] = 'dbSNP:' + biomarker_r['rsID']

def format_doid(row):
    if pd.notnull(row["rsID"]):
        return "{} mutation in {} ".format(row['rsID'], row['assessed_biomarker_entity'])
    else:
        return row['assessed_biomarker_entity']

# apply function to "disease name" column
biomarker_r["assessed_biomarker_entity"] = biomarker_r.apply(format_doid, axis=1)

biomarker_r['biomarker_status'] = 'presence of'
biomarker_r['best_biomarker_type'] = 'risk_biomarker'
biomarker_r['assessed_entity_type'] = 'gene'
        biomarkerdb.at[i, "SYSTEM"] = SYSTEM        
        biomarkerdb.at[i, "SYSTEM"] = SYSTEM        
