#OpenTargets has data available for download in parquets or json format
#here i used the parquets format to extract data
#the first thing I downloaded was the targets folder which has all information on potential targets

from pyspark import SparkConf
from pyspark.sql import SparkSession
import pyspark.sql.functions as F

evidencePath = "targets/"

spark = (
    SparkSession.builder
    .master('local[*]')
    .getOrCreate()
)

evd = spark.read.parquet(evidencePath)

evd.printSchema()

evdSelect = (evd.select("id", "approvedSymbol", "biotype", "approvedName", "proteinIds.id", "proteinIds.source", 'hallmarks.cancerHallmarks.description', 
                        'hallmarks.attributes.attribute_name', 'targetClass.id', 'dbXrefs.id', 'genomicLocation'))
                        targets = evdSelect.toPandas()


#rename columns that have the same name for mapping purposes later on
cols = []
count = 1
for column in targets.columns:
    if column == 'id':
        cols.append(f'id_{count}')
        count+=1
        continue
    cols.append(column)
targets.columns = cols

targets['id_2'] = targets['id_2'].str[:1]
targets['id_2'] = targets['id_2'].str[0]


#Focused on only cancerBiomarkers folder 
#extract exact data needed by calling the relevant columns needed and then putting it into a pandas dataframe
evidencePath3 = "cancerBiomarkers"

spark3 = (
    SparkSession.builder
    .master('local[*]')
    .getOrCreate()
)

evd3 = spark.read.parquet(evidencePath3)

evd3.printSchema()

evdSelect3 = (evd3.select("datasourceid", "targetId", "biomarkerName", 'biomarkers.variant.name', 'biomarkers.variant.id', 'variantId', 'variantRsId', 'diseaseFromSource', 'diseaseFromSourceId', 'diseaseId', 
                          'pmcIds', 'projectId', 'studyCases', 'studyId', 'studyOverview','urls.url', 'id', 'clinicalSignificances'))

evidence = evdSelect3.toPandas()

#the code that follows was done intially under the previous structure of the database. This was changed later but all information was 
#still relevant and used to make the current version of the database
lst = ['Assessed biomarker entity ID', 'Main x-ref',
       'Assessed biomarker entity', 'Biomarker', 'BEST biomarker type',
       'Specimen type', 'LOINC code', 'Disease name', 'Assessed entity type',
       'Literature evidence', 'Notes']
biomarkerdb = pd.DataFrame(columns = lst)


biomarkerdb['Biomarker'] = evidence['biomarkerName']
biomarkerdb['Assessed biomarker entity'] = biomarkerdb['Biomarker'].str.split().str[0]
biomarkerdb['Literature evidence'] = evidence['url'].str[0]
biomarkerdb['Disease name'] = evidence['diseaseFromSource'].apply(str.lower)
biomarkerdb['Assessed entity type'] = 'gene or protein'

#place the matching Disease ontology ID to the disease name from the DOID table that was made from the DOID.owl file
def format_doid(row):
    if pd.notnull(row["DOID"]):
        return "{} ({})".format(row["Disease name"], "DOID:" + row["DOID"])
    else:
        return row["Disease name"]

# apply function to "disease name" column
biomarkerdb["Disease name"] = biomarkerdb.apply(format_doid, axis=1)

#this new column was created for the purpose of being able to map the Uniport identifer to the main_xref
biomarkerdb['ID'] = evidence['targetId']


for index, row in biomarkerdb.iterrows():
    # get the ID for that row
    id = row["ID"]
    # check if that ID exists in the ID column of table 2
    matching_row = targets.loc[targets["id_1"] == id]
    # if it does, retrieve the corresponding protein ID from table 2
    if not matching_row.empty:
        protein_id = matching_row.iloc[0]["id_2"]
        # insert the protein ID into the appropriate column of table 1
        biomarkerdb.at[index, "Main x-ref"] = protein_id




biomarkerdb['test'] = ''

for index, row in biomarkerdb.iterrows():
    # get the ID for that row
    id = row["Assessed biomarker entity"]
    # check if that ID exists in the ID column of table 2
    matching_row = example2.loc[example2["Assessed biomarker entity"] == id]
    # if it does, retrieve the corresponding protein ID from table 2
    if not matching_row.empty:
        protein_id = matching_row.iloc[0]["test"]
        # insert the protein ID into the appropriate column of table 1
        biomarkerdb.at[index, "test"] = protein_id 
        
 #if there are specific changes mentioned in the source then place it with the biomarker       
def format_doid(row):
    if pd.notnull(row["test"]):
        return "{} ({})".format(row["Biomarker"], row["test"])
    else:
        return row["Biomarker"]


biomarkerdb["Biomarker"] = biomarkerdb.apply(format_doid, axis=1) 




biomarkerdb['Assessed biomarker entity name'] = None

#retrieve the name of the gene/biomarker name from the OpenTargets resource
for index, row in biomarkerdb.iterrows():
    # get the ID for that row
    id = row["ID"]
    # check if that ID exists in the ID column of table 2
    matching_row = targets.loc[targets["id_1"] == id]
    # if it does, retrieve the corresponding protein ID from table 2
    if not matching_row.empty:
        name_id = matching_row.iloc[0]["approvedName"]
        # insert the protein ID into the appropriate column of table 1
        biomarkerdb.at[index, "Assessed biomarker entity name"] = name_id
        
 #read in the LOINC.csv from the LOINC website 
 #match LOINC code with the gene symbol that appears
loinc_codes = pd.read_csv("Loinc.csv")
loinc_codes['first'] = loinc_codes['COMPONENT'].str.split(' ').str[0]

biomarkerdb['LOINC code'] = ''

for index, row in biomarkerdb.iterrows():
    # get the ID for that row
    id = row["Assessed biomarker entity"]
    # check if that ID exists in the ID column of table 2
    matching_row = loinc_codes.loc[loinc_codes["first"] == id]
    # if it does, retrieve the corresponding protein ID from table 2
    if not matching_row.empty:
        loinc_id = matching_row.iloc[0]["LOINC_NUM"]
        # insert the protein ID into the appropriate column of table 1
        biomarkerdb.at[index, "LOINC code"] = loinc_id
        
        
loinc_dict = loinc_codes.set_index("LOINC_NUM")["SYSTEM"].to_dict()

# Iterate through the rows of your biomarkerdb table
#system provided in LOINC can map to uberon code
for i, row in biomarkerdb.iterrows():
    # Get the value of the "Uberon ID" column for this row
    LOINC = row["LOINC code"]
    if pd.notnull(LOINC) and LOINC in loinc_dict:
        # Use the dictionary to look up the corresponding label
        SYSTEM = loinc_dict[LOINC]
        # Assign the label to the "Label" column in this row
        biomarkerdb.at[i, "SYSTEM"] = SYSTEM   
        

#read inthe uberon table with IDS and systems matched
#map to the database
uberon_map = pd.read_csv("uberon_system.csv", dtype={"uberon_value": "str"})
biomarkerdb['Specimen type'] = ''

for index, row in biomarkerdb.iterrows():
    # get the ID for that row
    id = row["SYSTEM"]
    # check if that ID exists in the ID column of table 2
    matching_row = uberon_map.loc[uberon_map["system"] == id]
    # if it does, retrieve the corresponding protein ID from table 2
    if not matching_row.empty:
        protein_id = matching_row.iloc[0]["uberon_value"]
        name_id = matching_row.iloc[0]["name"]
        # insert the protein ID into the appropriate column of table 1
        biomarkerdb.at[index, "Specimen type"] = name_id + " (UN:" + protein_id + ")"
        
        
 def format_doid(row):
    if pd.notnull(row["change"]):
        return "GRCh38|{}".format(row["change"])
    else:
        return row["Notes"]


biomarkerdb["Notes"] = biomarkerdb.apply(format_doid, axis=1)   


biomarkerdb['Literature evidence'] = ''

def format_doid(row):
    if pd.notnull(row["ID"]):
        return "https://platform.opentargets.org/evidence/{}/HP_0001787".format(row["ID"])
    else:
        return row["Literature evidence"]

biomarkerdb["Literature evidence"] = biomarkerdb.apply(format_doid, axis=1)

biomarkerdb['Notes'] = 'GRCh38'
biomarkerdb['Literature evidence'] = 'OpenTarget|' + biomarkerdb['Literature evidence']

#this file contains rsIDs for all biomarkers found in OpenTargets
#this is done to accomodate the changes made to the defintion and structure of the biomarker database
from pyspark import SparkConf
from pyspark.sql import SparkSession
import pyspark.sql.functions as F

evidencePath4 = "ot_genetics_portal/"

spark4 = (
    SparkSession.builder
    .master('local[*]')
    .getOrCreate()
)

evd4 = spark4.read.parquet(evidencePath4)


evdSelect4 = (evd4.select("targetId", "biomarkerName", 'biomarkers.variant.name', 'biomarkers.variant.id', 'variantId', 'variantRsId', 'diseaseFromSource'))
variantID = evdSelect4.toPandas()


import pandas as pd
biomarkerdb = pd.read_csv('opentarget_biomarkers.csv')

#now read back in the table to make the new changes 
#place the uniprot, genome build, and mutations/changes in the notes column
def format_doid(row):
    if pd.notnull(row["change"]):
        return "UPKB:{} ({})|GRCh38 ".format(row['Main x-ref'], row["change"])
    else:
        return "UPKB:{} ({})|GRCh38".format(row['Main x-ref'], row["Biomarker"])

biomarkerdb["Notes"] = biomarkerdb.apply(format_doid, axis=1)

#rename all the columns
biomarkerdb.columns = ['X', 'biomarker_ID', 'main_Xref', 'assessed_biomarker_entity', 'biomarker_status', 
                       'best_biomarker_type', 'specimen_type', 'loinc_code', 'condition_name', 'assessed_entity_type',
                       'evidence_source', 'notes', 'DOID', 'Uberon ID', 'ID', 'test', 'name', 'change', 'system']
                       
#the main_xref now becomes the rsID                       
for index, row in biomarkerdb.iterrows():
    # get the ID for that row
    id = row["ID"]
    # check if that ID exists in the ID column of table 2
    matching_row = variantID.loc[variantID["targetId"] == id]
    # if it does, retrieve the corresponding protein ID from table 2
    if not matching_row.empty:
        name_id = matching_row.iloc[0]["variantRsId"]
        # insert the protein ID into the appropriate column of table 1
        biomarkerdb.at[index, "Main x-ref"] = name_id               
        
biomarkerdb['assessed_biomarker_entity'] = biomarkerdb['main_Xref'] + ' mutation in ' + biomarkerdb['assessed_biomarker_entity']
biomarkerdb['main_Xref'] = 'dbSNP:' + biomarkerdb['main_Xref']
biomarkerdb['biomarker_status'] = 'presence of'
biomarkerdb['best_biomarker_type'] = 'risk_biomarker'
biomarkerdb['assessed_entity_type'] = 'gene'
