#create a list of the headers for the table 
lst = ['biomarker_ID', 'main_Xref', 'assessed_biomarker_entity', 'biomarker_status', 
       'best_biomarker_type', 'specimen_type', 'loinc_code', 'condition_name', 'assessed_entity_type',
       'evidence_source', 'notes']

biomarkerdb = pd.DataFrame(columns = lst)

# this was used mainly for references that reported rsID (it is not needed all the time, especially if the main_Xref for the biomarker
# is different.
# changing the rsID to 'string' is very helpful in the future and removes it from the '0.0' format
biomarkerdb['rsID'] = variant['RS# (dbSNP)'].astype('Int64').astype('str')
biomarkerdb['main_Xref'] = ''

def format_doid(row):
    if pd.notnull(row["rsID"]):
        return "dbSNP:rs{}".format(row["rsID"])
    else:
        return row["main_Xref"]

# apply function to "disease name" column
biomarkerdb["main_Xref"] = biomarkerdb.apply(format_doid, axis=1)

#these two elements should be found in the data source that is being researched
#assigned to different columns as of now and will be inserted into the final version of the table in the correct format
biomarkerdb['gene'] = variant['GeneSymbol']
biomarkerdb['disease'] = variant['disease']


#obtain the uniprot genes and protein names table from the Uniprot website
#read in the table and create a dictionary of the gene name and protein names (allows for faster mapping)
uniprot_acc = pd.read_table('uniprot_names.tsv')
biomarkerdb['uniprot'] = ''

gene_to_uniprot = dict(zip(uniprot_acc["Gene Names"].str.lower().str.strip(), uniprot_acc["Entry"]))

# Iterate over each row in biomarkerdb
for index, row in biomarkerdb.iterrows():
    id = row["gene"]
    if id.lower().strip() in gene_to_uniprot:
        protein_id = gene_to_uniprot[id.lower().strip()]
        biomarkerdb.at[index, "uniprot"] = protein_id
        

        

#create another dictionary that contains the gene name and protein/gene names as well
#this gives you the entity name that is used later
biomarkerdb['Name'] = ''

name_to_uniprot = dict(zip(uniprot_acc["Gene Names"].str.lower().str.strip(), uniprot_acc["Protein names"]))

# Iterate over each row in biomarkerdb
for index, row in biomarkerdb.iterrows():
    id = row["gene"]
    if id.lower().strip() in gene_to_uniprot:
        name_id = name_to_uniprot[id.lower().strip()]
        biomarkerdb.at[index, "Name"] = name_id
        
        
#find the LOINC code dataset from the loinc website
#the csv file is the most useful
#create a new column in the loinc table that has the gene name only from the 'COMPONENT' column
loinc_codes = pd.read_csv("Loinc.csv")
loinc_codes['first'] = loinc_codes['COMPONENT'].str.split(' ').str[0]

#create a dictionary of the gene name and loinc code from the table
loinc_dict = loinc_codes.set_index("first")["LOINC_NUM"].to_dict()

# Iterate through the rows of your biomarkerdb table
for i, row in biomarkerdb.iterrows():
    first = row["gene"]
    if pd.notnull(first) and first in loinc_dict:
        # Use the dictionary to look up the corresponding LOINC
        loinc = loinc_dict[first]
        # Assign the code to the "loinc_code" column in this row
        biomarkerdb.at[i, "loinc_code"] = loinc
        
        
#this dictionary matches the loinc codes to the system that is reported with it from the LOINC website
system_dict = loinc_codes.set_index("LOINC_NUM")["SYSTEM"].to_dict()

# Iterate through the rows of your biomarkerdb table
for i, row in biomarkerdb.iterrows():
    LOINC = row["loinc_code"]
    if pd.notnull(LOINC) and LOINC in system_dict:
        SYSTEM = system_dict[LOINC]
        biomarkerdb.at[i, "SYSTEM"] = SYSTEM
        
        
#this will map uberon values to the table based on the system provided from the LOINC table
uberon_map = pd.read_csv("uberon_system.csv", dtype={"uberon_value": "str"})

biomarkerdb['specimen_type'] = ''

for index, row in biomarkerdb.iterrows():
    # get the ID for that row
    id = row["SYSTEM"]
    matching_row = uberon_map.loc[uberon_map["system"] == id]
    if not matching_row.empty:
        uberon_id = matching_row.iloc[0]["uberon_value"]
        name_id = matching_row.iloc[0]["name"]
        biomarkerdb.at[index, "specimen_type"] = name_id + " (UN:" + uberon_id + ")"
# Add a new column to your biomarkerdb table called "DOID"
biomarkerdb["DOID"] = None

# Iterate through the rows of your biomarkerdb table
for i, row in biomarkerdb.iterrows():
    disease_name = row["disease"].lower()
    if disease_name in doid_dict:
        biomarkerdb.at[i, "DOID"] = doid_dict[disease_name]["DOID"]
    else:
        for name, value in doid_dict.items():
            if disease_name in value["Exact Synonyms"]:
                biomarkerdb.at[i, "DOID"] = value["DOID"]
                break
                
                
#now put the table together
#this iterates through the table and places disease name with DOID into the condition_name column
def format_doid(row):
    if pd.notnull(row["DOID"]):
        return "{} (DOID:{})".format(row["disease"].lower(), row["DOID"])
    else:
        return row["disease"].lower()

# apply function to "disease name" column
biomarkerdb["condition_name"] = biomarkerdb.apply(format_doid, axis=1)

#format the evidence_source to have a link to the biomarker as well
#the link depends on how the source links to the biomarker but the information should be easy to copy
def format_doid(row):
    if pd.notnull(row["variation"]):
        return "ClinVar|https://www.ncbi.nlm.nih.gov/clinvar/variation/{}/?new_evidence=true ".format(row['variation'])
    else:
        return "ClinVar"


biomarkerdb["evidence_source"] = biomarkerdb.apply(format_doid, axis=1)

#put together information from name, gene, and rsID column to form the assessed_entity_name column

biomarkerdb['assessed_biomarker_entity'] = ''

pd.options.display.float_format = '{:,.0f}'.format

def format_doid(row):
    if pd.notnull(row["rsID"]):
        rsID = int(row["rsID"]) # convert to integer
        return "rs{} mutation in {} ({})".format(rsID, row["Name"].lower(), row['Gene'])
    else:
        return "mutation in {}({})".format(row["Name"], row['Gene'])


biomarkerdb["assessed_biomarker_entity"] = biomarkerdb.apply(format_doid, axis=1)

biomarkerdb['notes'] = ''


#format notes column
def format_doid(row):
    if pd.notnull(row["uniprot"]):
        return "UPKB:{}".format(row['uniprot'])
    else:
        return row['notes']


biomarkerdb["notes"] = biomarkerdb.apply(format_doid, axis=1)

#places some extra information into the notes column if needed or found in the source
def format_doid(row):
    if pd.notnull(row["mutation"]):
        return "{} ({})".format(row['notes'], row['mutation'])
    else:
        return row['notes']

# apply function to "disease name" column
biomarkerdb["notes"] = biomarkerdb.apply(format_doid, axis=1)

#add genome build to the notes section (usually easy to find and the source stays consistent to one genome build)
biomarkerdb['notes'] = biomarkerdb['notes'] + '|GRCh38'

#these are dependent on the type of biomarker 
#my data was all genes and cancer biomarkers so this was hardcoded in for the moment
biomarkerdb['biomarker_status'] = 'presence of'
biomarkerdb['best_biomarker_type'] = 'risk_biomarker'
biomarkerdb['assessed_entity_type'] = 'gene'
